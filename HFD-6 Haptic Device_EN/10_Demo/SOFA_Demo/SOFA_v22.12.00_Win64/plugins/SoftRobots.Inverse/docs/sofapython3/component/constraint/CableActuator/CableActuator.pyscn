import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

def createScene(rootNode):

                rootNode.addObject('RequiredPlugin', pluginName='SoftRobots SoftRobots.Inverse SofaConstraint SofaDeformable SofaEngine SofaImplicitOdeSolver SofaLoader SofaOpenglVisual SofaPreconditioner SofaSimpleFem SofaSparseSolver SofaTopologyMapping')
                rootNode.addObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

                rootNode.addObject('FreeMotionAnimationLoop')
                rootNode.addObject('QPInverseProblemSolver', printLog='0')

		#goal
                goal = rootNode.addChild('goal')
                goal.addObject('EulerImplicitSolver', firstOrder=True)
                goal.addObject('CGLinearSolver', iterations='100', tolerance="1e-5", threshold="1e-5")
                goal.addObject('MechanicalObject', name='goalMO', position='-4.72055 1.13543 3.10608')
                goal.addObject('SphereCollisionModel', radius='0.25', group='3')
                goal.addObject('UncoupledConstraintCorrection')


		#bunny
                bunny = rootNode.addChild('bunny')
                bunny.addObject('EulerImplicitSolver', name='odesolver')
                bunny.addObject('ShewchukPCGLinearSolver', iterations='15', name='linearsolver', tolerance='1e-5', preconditioners='preconditioner', use_precond=True, update_step='1')

                bunny.addObject('MeshVTKLoader', name='loader', filename=path+'Hollow_Stanford_Bunny.vtu')
                bunny.addObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
                bunny.addObject('TetrahedronSetTopologyModifier')

                bunny.addObject('MechanicalObject', name='tetras', template='Vec3', showIndices=False, showIndicesScale='4e-5', rx='0', dz='0')
                bunny.addObject('UniformMass', totalMass='0.5')
                bunny.addObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio='0.3',  youngModulus='18000')

                bunny.addObject('BoxROI', name='boxROI', box='-5 -15 -5  5 -4.5 5', drawBoxes=True)
                bunny.addObject('RestShapeSpringsForceField', points='@boxROI.indices', stiffness='1e12')

                bunny.addObject('SparseLDLSolver', name='preconditioner')
                bunny.addObject('LinearSolverConstraintCorrection', solverName='preconditioner')

		#bunny/constraints
                constraints = bunny.addChild('constraints')
                constraints.addObject('MechanicalObject', name="points", position="-4.72055 1.13543 3.10608")
                constraints.addObject('PositionEffector', indices="0", template='Vec3', effectorGoal="@../../goal/goalMO.position", useDirections='0 1 0')
                constraints.addObject('CableActuator', template='Vec3', name='head', indices='0', pullPoint="-4.72055 -5 3.10608", maxPositiveDisp="5", minForce="0")
                constraints.addObject('BarycentricMapping', mapForces=False, mapMasses=False)


		#bunny/bunnyVisu
                bunnyVisu = bunny.addChild('visu')
                bunnyVisu.addObject('TriangleSetTopologyContainer', name='container')
                bunnyVisu.addObject('TriangleSetTopologyModifier')
                bunnyVisu.addObject('Tetra2TriangleTopologicalMapping', name='Mapping')

                bunnyVisu.addObject('OglModel', template='Vec3d', color='0.7 0.4 0.4 1')
                bunnyVisu.addObject('IdentityMapping')

                return rootNode
