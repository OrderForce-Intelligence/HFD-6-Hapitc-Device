import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

def createScene(rootNode):

                rootNode.addObject('RequiredPlugin', pluginName='SoftRobots SoftRobots.Inverse')
                rootNode.addObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

                rootNode.addObject('FreeMotionAnimationLoop')
                rootNode.addObject('QPInverseProblemSolver', printLog='0')
                rootNode.addObject('DefaultPipeline', verbose="0")
                rootNode.addObject('BruteForceBroadPhase')
                rootNode.addObject('BVHNarrowPhase')
                rootNode.addObject('DefaultContactManager', response="FrictionContactConstraint")
                rootNode.addObject('LocalMinDistance', name="Proximity", alarmDistance="0", contactDistance="0")


		#goal
                goal = rootNode.addChild('goal')
                goal.addObject('EulerImplicitSolver', firstOrder=True)
                goal.addObject('CGLinearSolver', iterations='100', tolerance='1e-05', threshold='1e-05')
                goal.addObject('MechanicalObject', name='goalMO', position='-4.72055 1.13543 3.10608')
                goal.addObject('SphereCollisionModel', radius='0.25', group='3')
                goal.addObject('UncoupledConstraintCorrection')


		#bunny
                bunny = rootNode.addChild('bunny')
                bunny.addObject('EulerImplicitSolver', name='odesolver')
                bunny.addObject('ShewchukPCGLinearSolver', iterations='15', name='linearsolver', tolerance='1e-5', preconditioners='preconditioner', use_precond=True, update_step='1')

                bunny.addObject('MeshVTKLoader', name='loader', filename=path+'Hollow_Stanford_Bunny.vtu')
                bunny.addObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
                bunny.addObject('TetrahedronSetTopologyModifier')

                bunny.addObject('MechanicalObject', name='tetras', template='Vec3', showIndices=False, showIndicesScale='4e-5', rx='0', dz='0')
                bunny.addObject('UniformMass', totalMass='0.5')
                bunny.addObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio='0.3',  youngModulus='18000')

                bunny.addObject('BoxROI', name='boxROI', box='-5 -15 -5  5 -4.5 5', drawBoxes=True, position="@tetras.rest_position", tetrahedra="@container.tetrahedra")
                bunny.addObject('RestShapeSpringsForceField', points='@boxROI.indices', stiffness='1e12')

                bunny.addObject('SparseLDLSolver', name='preconditioner')
                bunny.addObject('LinearSolverConstraintCorrection', solverName='preconditioner')

		#bunny/effector
                effector = bunny.addChild('effector')
                effector.addObject('MechanicalObject', name="effectorPoint", position="-4.72055 1.13543 3.10608")
                effector.addObject('PositionEffector', indices="0", template='Vec3', effectorGoal="@../../goal/goalMO.position", useDirections='0 1 0')
                effector.addObject('CableActuator', template='Vec3', name='head', indices='0', pullPoint="-4.72055 -5 3.10608", maxPositiveDisp="5", minForce="0")
                effector.addObject('BarycentricMapping', mapForces=False, mapMasses=False)

		#bunny/cavity
                cavity = bunny.addChild('cavity')
                cavity.addObject('MeshObjLoader', name='loader', filename=path+'Hollow_Bunny_Body_Cavity.obj')
                cavity.addObject('MeshTopology', src='@loader', name='topo')
                cavity.addObject('MechanicalObject', name='cavity')
                cavity.addObject('SurfacePressureActuator', template='Vec3', triangles='@topo.triangles', maxPressure='60', minPressure='0', visualization='1', showVisuScale='0.0002')
                cavity.addObject('BarycentricMapping', name='mapping',  mapForces=False, mapMasses=False)


		#bunny/bunnyVisu
                bunnyVisu = bunny.addChild('visu')
                bunnyVisu.addObject('TriangleSetTopologyContainer', name='container')
                bunnyVisu.addObject('TriangleSetTopologyModifier')
                bunnyVisu.addObject('Tetra2TriangleTopologicalMapping', name='Mapping', input="@../container", output="@container")

                bunnyVisu.addObject('OglModel', template='ExtVec3f', color='0.3 0.2 0.2 0.6')
                bunnyVisu.addObject('IdentityMapping')




                return rootNode
