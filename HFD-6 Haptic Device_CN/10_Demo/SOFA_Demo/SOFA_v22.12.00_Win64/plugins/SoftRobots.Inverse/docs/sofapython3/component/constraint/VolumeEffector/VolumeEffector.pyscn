import Sofa

import os
path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

def createScene(rootNode):

                rootNode.addObject('RequiredPlugin', pluginName='SoftRobots SoftRobots.Inverse')
                rootNode.addObject('RequiredPlugin', name='SofaPlugins', pluginName=['SofaConstraint','SofaImplicitOdeSolver','SofaDeformable','SofaEngine','SofaTopologyMapping','SofaLoader','SofaOpenglVisual','SofaPreconditioner','SofaSimpleFem','SofaSparseSolver'])
                rootNode.addObject('VisualStyle', displayFlags='showVisualModels hideBehaviorModels showCollisionModels hideBoundingCollisionModels hideForceFields showInteractionForceFields hideWireframe')

                rootNode.addObject('FreeMotionAnimationLoop')
                rootNode.addObject('QPInverseProblemSolver', printLog=False)

                rootNode.addObject('BackgroundSetting', color=[0, 0.168627, 0.211765, 1.])
                rootNode.addObject('OglSceneFrame', style="Arrows", alignment="TopRight")

		#bunny
                bunny = rootNode.addChild('bunny')
                bunny.addObject('EulerImplicitSolver', name='odesolver')
                bunny.addObject('ShewchukPCGLinearSolver', iterations=15, name='linearsolver', tolerance=1e-5, preconditioners='preconditioner', use_precond=True, update_step='1')
                bunny.addObject('MeshVTKLoader', name='loader', filename=path+'Hollow_Stanford_Bunny.vtu')
                bunny.addObject('TetrahedronSetTopologyContainer', src='@loader', name='container')
                bunny.addObject('TetrahedronSetTopologyModifier')
                bunny.addObject('MechanicalObject', name='tetras', template='Vec3', showIndices=False, showIndicesScale=4e-5)
                bunny.addObject('UniformMass', totalMass=0.5)
                bunny.addObject('TetrahedronFEMForceField', template='Vec3', name='FEM', method='large', poissonRatio=0.45,  youngModulus=60000)
                bunny.addObject('BoxROI', name='boxROI', box='-5 -5.5 -5  5 -4.5 5', drawBoxes=True, position="@tetras.rest_position", tetrahedra="@container.tetrahedra")
                bunny.addObject('RestShapeSpringsForceField', points='@boxROI.indices', stiffness=1e12)
                bunny.addObject('SparseLDLSolver', name='preconditioner', template="CompressedRowSparseMatrixd")
                bunny.addObject('LinearSolverConstraintCorrection', solverName='preconditioner')

		#bunny/effector
                effector = bunny.addChild('effector')
                effector.addObject('MeshObjLoader', name='loader', filename=path+'Hollow_Bunny_Body_Cavity.obj')
                effector.addObject('MeshTopology', src='@loader', name='topo')
                effector.addObject('MechanicalObject', name='cavity')
                effector.addObject('VolumeEffector', template='Vec3', triangles='@topo.triangles', desiredVolume=60)
                effector.addObject('BarycentricMapping', name='mapping',  mapForces=False, mapMasses=False)

		#bunny/actuator
                actuator = bunny.addChild('actuator')
                actuator.addObject('MechanicalObject', name="effectorPoint", position="0 1.2 1. 0.5 1.2 0.5 0.5 1.2 1. 0 1.2 0.5", showObject=1, showObjectScale=0.2, drawMode=1)
                actuator.addObject('ForcePointActuator', template='Vec3', indices="0 1 2 3", direction="0 -1 0", minForce=0, showForce=1, visuScale=0.01)
                actuator.addObject('BarycentricMapping', mapForces=False, mapMasses=False)


		#bunny/bunnyVisu
                bunnyVisu = bunny.addChild('visu')
                bunnyVisu.addObject('TriangleSetTopologyContainer', name='container')
                bunnyVisu.addObject('TriangleSetTopologyModifier')
                bunnyVisu.addObject('Tetra2TriangleTopologicalMapping', name='Mapping', input="@../container", output="@container")

                bunnyVisu.addObject('OglModel', template='Vec3', color=[0.3, 0.2, 0.2, 0.6])
                bunnyVisu.addObject('IdentityMapping')

                return rootNode
